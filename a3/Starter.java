/**
 * @author Nicolas Gugliemo
 * @date 10/23/2023
 * Project: Assignment #2 csc 133
 */


package com.mycompany.a3;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;

/**
 * The starter class is the main class for the project. Methods include init(), stop(), destroy(),
 * and start(). The purpose of the project is to create a game called theJourney which involves an
 * ant that must collect all flags in order on a map without dying to the spiders or running out of 
 * food. The player gets 3 lives and must complete the game as fast as possible. In this version of 
 * the game, a GUI has been created for the user which can be interacted with. No collisions have
 *  been set. The game is written in java based "codename1" or "CN1".    
 */
public class Starter {		//The following code is auto-generated by codename1 , do not modify

	private Form current;
	private Resources theme;

	public void init(Object context) {

		updateNetworkThreadCount(2);

		theme = UIManager.initFirstTheme("/theme");

		Toolbar.setGlobalToolbar(true);

		Log.bindCrashProtection(true);

		addNetworkErrorListener(err -> {

			err.consume();
			if(err.getError() != null) {
				
				Log.e(err.getError());
			}
			Log.sendLogAsync();
			Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
		});        
	}
	/**
	 * The start method calls a new "Game" which is where the bulk of the code
	 * and work is done for the game to function. It also checks to see if a form 
	 * is needed to be shown. This method is auto generated by codename1, do not modify
	 * anything that is not "new Game()".
	 */
	public void start() {
		
		if(current != null){
			
			current.show();
			return;
		}
		new Game ();
	}

	/**
	 * The stop method is called when the program is suspended by the user. This method is 
	 * auto generated by codename1, do not modify.
	 */
	public void stop() {
		
		current = getCurrentForm();
		if(current instanceof Dialog) {
			
			((Dialog)current).dispose();
			current = getCurrentForm();
		}
	}

	/**
	 * The destroy method is called when the application is destroyed by the user. This method is 
	 * auto generated by codename1, do not modify.
	 */
	public void destroy() {
		
	}
}
